- Docker is a tool for creating, deploying, and running applications easily. It allows us to package our applications with all the dependencies, and distribute them as individual bundles. Docker guarantees that our application will run in the same way on every Docker instance.

- Docker images : An image is a file that represents a packaged application with all the dependencies needed to run correctly. In other words, we could say that a Docker image is like a Java class. Images are built as a series of layers. Layers are assembled on top of one another.

- A layer? Simply put, a layer is an image.

- Docker Containers : A container is an instance of an image. Each container can be identified by its ID. Going back to our Java development analogy, we could say that a container is like an instance of a class.

- Docker defines seven states for a container: created, restarting, running, removing, paused, exited, and dead. This is important to know. Since a container is just an instance of the image, it doesn't need to be running.

- One big advantage is that containers are like lightweight VMs. Their behaviors are completely isolated from each other. This means that we can run multiple containers of the same image, having each one in a different state with different data and different IDs.

* to see all the images : docker images
* to running docker images : docker run -d REPOSITORY:TAG
* to check id the image is running : docker ps
* to create a container : docker container create <image_name>:<tag>
* to start a container : docker container start <container_id>
* to stop a container : docker container stop <container_id>
* to pause a running container : docker pause <container_id>
* to unpause : docker unpause <container_id>
* to remove a container : docker container rm <container_id>

















------------------------bibliographie--------------------------------------
https://stackify.com/docker-image-vs-container-everything-you-need-to-know/
